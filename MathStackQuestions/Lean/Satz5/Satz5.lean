import Mathlib
import Mathlib/MeasureTheory/Measure/Continuity
-- set_option diagnostics true

open Set MeasureTheory Topology Filter
open scoped Topology BigOperators

namespace Satz5

noncomputable section

/-- Kurzschreibweisen f√ºr (0,1) und [0,1]. -/
def Ioo01 : Set ‚Ñù := Ioo 0 1
def Icc01 : Set ‚Ñù := Icc 0 1

/-- Eine m√∂gliche (optionale) Formulierung von ‚Äûsuperdicht in (0,1)‚Äú. -/
def SuperdenseIn01 (M : Set ‚Ñù) : Prop :=
  ‚àÄ {a b : ‚Ñù}, 0 < a ‚Üí a < b ‚Üí b < 1 ‚Üí Dense (M ‚à© Ioo a b)

/-- Œ∫ als Lebesgue-Au√üenma√ü (Typ `ENNReal`). -/
def kappa (S : Set ‚Ñù) : ENNReal := volume.toOuterMeasure S

/-- **Satz 5 (programmative Form)** ‚Äì konstruiert fallende offene `U n` und
wachsende abgeschlossene `K n` mit `‚ãÇ n, (U n \ K n) = ‚àÖ`. -/
theorem satz5_construct_sequences
  (M : Set ‚Ñù)
  (hM_subset : M ‚äÜ Ioo01)
  (_ : kappa M = 0)
  (_ : ¬¨ M.Countable)
  (_ : SuperdenseIn01 M)
  (hG : ‚àÉ s : ‚Ñï ‚Üí Set ‚Ñù, (‚àÄ n, IsOpen (s n)) ‚àß M = ‚ãÇ n, s n)
  (hF : ‚àÉ t : ‚Ñï ‚Üí Set ‚Ñù, (‚àÄ n, IsClosed (t n)) ‚àß M = ‚ãÉ n, t n) :
  ‚àÉ (K U : ‚Ñï ‚Üí Set ‚Ñù),
    (‚àÄ n, IsClosed (K n) ‚àß K n ‚äÜ M) ‚àß
    (‚àÄ n, IsOpen (U n) ‚àß M ‚äÜ U n) ‚àß
    (Antitone U) ‚àß (Monotone K) ‚àß
    (‚ãÇ n, (U n \ K n) = (‚àÖ : Set ‚Ñù)) := by
  classical
  rcases hG with ‚ü®s, hs_open, hM_iInter‚ü©
  rcases hF with ‚ü®t, ht_closed, hM_iUnion‚ü©

  -- U-Folge: endliche Schnitte von s
  let U : ‚Ñï ‚Üí Set ‚Ñù :=
    fun n => Nat.rec (s 0) (fun n Un => Un ‚à© s (n+1)) n
  have U_zero : U 0 = s 0 := by simp [U]
  have U_succ (n : ‚Ñï) : U (n+1) = U n ‚à© s (n+1) := by simp [U]

  have hU_open : ‚àÄ n, IsOpen (U n) := by
    intro n
    refine Nat.rec (by simpa [U_zero] using hs_open 0)
      (fun n ih => by simpa [U_succ n] using ih.inter (hs_open (n+1))) n

  have hU_contains : ‚àÄ n, M ‚äÜ U n := by
    have hM_sub_all : ‚àÄ k, M ‚äÜ s k := by
      intro k x hx
      have : x ‚àà ‚ãÇ n, s n := by simpa [hM_iInter] using hx
      exact mem_iInter.mp this k
    intro n
    refine Nat.rec (by intro x hx; simpa [U_zero] using hM_sub_all 0 hx)
      (fun n ih x hx => And.intro (ih hx) (hM_sub_all (n+1) hx)) n

  have stepU : ‚àÄ n, U (n+1) ‚äÜ U n := by
    intro n x hx
    have hx' : x ‚àà U n ‚à© s (n+1) := by simpa [U_succ n] using hx
    exact hx'.left

  have hU_antitone : Antitone U := by
    intro m n hmn
    obtain ‚ü®k, rfl‚ü© := Nat.exists_eq_add_of_le hmn
    refine Nat.rec (by simp) (fun k ih => ?_) k
    have hstep : U (m + k + 1) ‚äÜ U (m + k) := by
      simpa [Nat.add_assoc] using stepU (m + k)
    exact hstep.trans ih

  -- K-Folge: endliche Vereinigungen von Icc01 ‚à© t k (nur Abgeschlossenheit ben√∂tigt)
  let Kpiece : ‚Ñï ‚Üí Set ‚Ñù := fun k => Icc01 ‚à© t k
  have hKpiece_closed : ‚àÄ k, IsClosed (Kpiece k) := by
    intro k
    have hIcc_closed : IsClosed Icc01 := by
      simpa [Icc01] using (isClosed_Icc : IsClosed (Icc (0 : ‚Ñù) 1))
    simpa [Kpiece] using hIcc_closed.inter (ht_closed k)

  let K : ‚Ñï ‚Üí Set ‚Ñù :=
    fun n => Nat.rec (Kpiece 0) (fun n Kn => Kn ‚à™ Kpiece (n+1)) n
  have K_zero : K 0 = Kpiece 0 := by simp [K]
  have K_succ (n : ‚Ñï) : K (n+1) = K n ‚à™ Kpiece (n+1) := by simp [K]

  have hK_closed : ‚àÄ n, IsClosed (K n) := by
    intro n
    refine Nat.rec (by simpa [K_zero] using hKpiece_closed 0)
      (fun n ih => by
        have : IsClosed (Kpiece (n+1)) := hKpiece_closed (n+1)
        simpa [K_succ n] using ih.union this) n

  -- Aus M = ‚ãÉ t n folgt: t k ‚äÜ M f√ºr alle k
  have ht_sub_M : ‚àÄ k, t k ‚äÜ M := by
    intro k x hx
    have : x ‚àà ‚ãÉ n, t n := mem_iUnion.mpr ‚ü®k, hx‚ü©
    simpa [hM_iUnion] using this

  -- Daher Kpiece k ‚äÜ M und folglich K n ‚äÜ M
  have hKpiece_subset_M : ‚àÄ k, Kpiece k ‚äÜ M := by
    intro k x hx; exact ht_sub_M k hx.right

  have hK_subset : ‚àÄ n, K n ‚äÜ M := by
    intro n
    refine Nat.rec (by simpa [K_zero] using hKpiece_subset_M 0)
      (fun n ih => ?_) n
    intro x hx
    have hx' : x ‚àà K n ‚à™ Kpiece (n+1) := by simpa [K_succ n] using hx
    cases hx' with
    | inl hxKn => exact ih hxKn
    | inr hxKp => exact hKpiece_subset_M (n+1) hxKp

  -- Monotonie von K
  have hK_mono : Monotone K := by
    intro i j hij
    obtain ‚ü®k, rfl‚ü© := Nat.exists_eq_add_of_le hij
    refine Nat.rec (by simp) (fun k ih => ?_) k
    intro x hx
    have hx' : x ‚àà K (i + k) := ih hx
    have : x ‚àà K (i + k) ‚à™ Kpiece (i + k + 1) := Or.inl hx'
    simpa [K_succ (i + k)] using this

  -- Leere des Schnitts ‚ãÇ (U n \ K n)
  have h_inter_empty : (‚ãÇ n, (U n \ K n)) = (‚àÖ : Set ‚Ñù) := by
    apply eq_empty_iff_forall_not_mem.mpr
    intro x hx
    -- aus hx: x ‚àà U n und x ‚àâ K n f√ºr alle n
    have hxU : ‚àÄ n, x ‚àà U n := fun n => (mem_iInter.mp hx n).left
    have hx_notK : ‚àÄ n, x ‚àâ K n := fun n => (mem_iInter.mp hx n).right

    -- aus x ‚àà U n folgt x ‚àà s n f√ºr alle n
    have hx_in_all_s : ‚àÄ n, x ‚àà s n := by
      intro n
      refine Nat.rec (by simpa [U_zero] using hxU 0)
        (fun n ih => ?_) n
      have hxUn1 : x ‚àà U (n+1) := hxU (n+1)
      have : x ‚àà U n ‚à© s (n+1) := by simpa [U_succ n] using hxUn1
      exact this.right

    -- x ‚àà M (da x ‚àà ‚ãÇ s n)
    have hxM : x ‚àà M := by
      have : x ‚àà ‚ãÇ n, s n := mem_iInter.mpr (by intro n; exact hx_in_all_s n)
      simpa [hM_iInter] using this

    -- daraus x ‚àà Icc01 (weil M ‚äÜ Ioo01 ‚äÜ Icc01)
    have hx_Icc : x ‚àà Icc01 := by
      have hx_Ioo : x ‚àà Ioo01 := hM_subset hxM
      exact ‚ü®le_of_lt hx_Ioo.1, le_of_lt hx_Ioo.2‚ü©

    -- aus M = ‚ãÉ t n folgt ‚àÉ k, x ‚àà t k
    obtain ‚ü®k, hx_tk‚ü© : ‚àÉ k, x ‚àà t k := by
      have : x ‚àà ‚ãÉ n, t n := by simpa [hM_iUnion] using hxM
      exact mem_iUnion.mp this

    -- dann x ‚àà Kpiece k ‚äÜ K k, Widerspruch zu hx_notK k
    have hx_in_Kpiece : x ‚àà Kpiece k := ‚ü®hx_Icc, hx_tk‚ü©
    have Kpiece_subset_K : ‚àÄ n, Kpiece n ‚äÜ K n := by
      intro n
      induction' n with n ih
      ¬∑ intro x hx; simpa [K_zero] using hx
      ¬∑ intro x hx
        have : x ‚àà K n ‚à™ Kpiece (n+1) := Or.inr hx
        simpa [K_succ n] using this
    have hx_in_Kk : x ‚àà K k := Kpiece_subset_K k hx_in_Kpiece
    exact (hx_notK k) hx_in_Kk

  refine ‚ü®K, U, ?_, ?_, hU_antitone, hK_mono, h_inter_empty‚ü©
  ¬∑ intro n; exact ‚ü®hK_closed n, hK_subset n‚ü©
  ¬∑ intro n; exact ‚ü®hU_open n, hU_contains n‚ü©

/-- **Hilfssatz (Grenzwert der L√ºcken)**:
F√ºr fallende offene `U`, wachsende abgeschlossene `K` und `‚ãÇ n, (U n \ K n) = ‚àÖ`
gilt `volume ((U n ‚à© [0,1]) \ K n) ‚Üí 0`.
(Beweis ohne `tendsto_measure_iInter_of_measurableSet_decreasing`,
per `tendsto_atTop_iInf` + `measure_iInter_eq_iInf`.) -/
theorem tendsto_gap_length_to_zero
    (U K : ‚Ñï ‚Üí Set ‚Ñù)
    (hU_open : ‚àÄ n, IsOpen (U n))
    (hK_closed : ‚àÄ n, IsClosed (K n))
    (hU_antitone : Antitone U)
    (hK_mono     : Monotone K)
    (hGap_empty  : (‚ãÇ n, (U n \ K n)) = (‚àÖ : Set ‚Ñù)) :
    Tendsto (fun n => volume ((U n ‚à© Icc01) \ K n)) atTop (ùìù 0) := by
  classical
  let A : ‚Ñï ‚Üí Set ‚Ñù := fun n => (U n ‚à© Icc01) \ K n

  -- Messbarkeit (offen / abgeschlossen ‚áí messbar)
  have hA_meas : ‚àÄ n, MeasurableSet (A n) := by
    intro n
    have hcl_Icc : IsClosed Icc01 := by
      simpa [Icc01] using (isClosed_Icc : IsClosed (Icc (0:‚Ñù) 1))
    have hmeasU : MeasurableSet (U n) := (hU_open n).measurableSet
    have hmeasIcc : MeasurableSet Icc01 := hcl_Icc.measurableSet
    have hmeasK : MeasurableSet (K n) := (hK_closed n).measurableSet
    simpa [A] using (hmeasU.inter hmeasIcc).diff hmeasK

  -- Antitonie der L√ºcken
  have hA_antitone : Antitone A := by
    intro m n hmn x hx
    rcases hx with ‚ü®hxU, hxNotK‚ü©
    rcases hxU with ‚ü®hxUm, hxIcc‚ü©
    have hxUn : x ‚àà U m := (hU_antitone hmn) hxUm
    have hxNotKm : x ‚àâ K m := by
      intro hxKm
      have : x ‚àà K n := (hK_mono hmn) hxKm
      exact hxNotK this
    exact ‚ü®‚ü®hxUn, hxIcc‚ü©, hxNotKm‚ü©

  -- Leerer Schnitt (auch nach Schnitt mit [0,1])
  have hA_iInter_empty : (‚ãÇ n, A n) = (‚àÖ : Set ‚Ñù) := by
    apply eq_empty_iff_forall_not_mem.mpr
    intro x hx
    have hx' : x ‚àà ‚ãÇ n, (U n \ K n) := by
      refine mem_iInter.mpr (by
        intro n
        have hsub : A n ‚äÜ U n \ K n := by
          intro y hy; exact ‚ü®hy.left.left, hy.right‚ü©
        exact hsub (mem_iInter.mp hx n))
    have : x ‚àà (‚àÖ : Set ‚Ñù) := by
      simpa [hGap_empty] using hx'
    simpa using this

  -- Œº([0,1]) endlich ‚áí Œº(A 0) endlich (nur √ºber explizite Formel)
  have hv : volume Icc01 = (1 : ENNReal) := by
    have : volume (Icc (0 : ‚Ñù) 1) = ENNReal.ofReal (1 - 0) := by
      simpa using (volume_Icc (0 : ‚Ñù) 1)
    simpa [Icc01, ENNReal.ofReal_one, sub_zero] using this
  have hIcc_finite : volume Icc01 < (‚ä§ : ENNReal) := by
    have : (1 : ENNReal) < (‚ä§ : ENNReal) := by simpa using ENNReal.one_lt_top
    simpa [hv] using this
  have hA0_subset_Icc : A 0 ‚äÜ Icc01 := by
    intro x hx; exact hx.left.right
  have hA0_finite : volume (A 0) < (‚ä§ : ENNReal) := by
    have hmono : volume (A 0) ‚â§ volume Icc01 := measure_mono hA0_subset_Icc
    exact lt_of_le_of_lt hmono hIcc_finite

  -- **Fallback ohne Speziallemma**:
  -- (1) Volumina sind antiton, weil A antiton und Œº monoton in der Menge
  have hVol_antitone : Antitone (fun n => volume (A n)) := by
    intro m n hmn
    exact measure_mono (hA_antitone hmn)

  -- (2) Lim atTop einer antitonen Folge = iInf der Werte
  have h_tendsto_iInf :
      Tendsto (fun n => volume (A n)) atTop
              (ùìù (iInf fun n => volume (A n))) :=
    tendsto_atTop_iInf hVol_antitone

  -- (3) Kontinuit√§t von oben f√ºr Ma√ü: Œº(‚ãÇ A n) = ‚®Ö Œº(A n)
  have h_meas_iInf :
      volume (‚ãÇ n, A n) = ‚®Ö n, volume (A n) :=
    measure_iInter (Œº := volume) (s := A)
      hA_meas hA_antitone (ne_of_lt hA0_finite)

  -- (4) Umschreiben und Ziel ‚Äû‚Üí 0‚Äú
  have h_tendsto :
      Tendsto (fun n => volume (A n)) atTop (ùìù (volume (‚ãÇ n, A n))) := by
    simpa [h_meas_iInf] using h_tendsto_iInf

  -- Schlie√ülich: ‚ãÇ A n = ‚àÖ ‚áí Ma√ü = 0
  simpa [A, hA_iInter_empty] using h_tendsto

/-- **Korollar aus Satz 5**: Aus `satz5_construct_sequences` folgt
`volume ((U n ‚à© [0,1]) \ K n) ‚Üí 0`. -/
theorem tendsto_gap_from_satz5
  (M : Set ‚Ñù)
  (hM_subset : M ‚äÜ Ioo01)
  (h_kappa0 : kappa M = 0)
  (h_uncount : ¬¨ M.Countable)
  (h_super : SuperdenseIn01 M)
  (hG : ‚àÉ s : ‚Ñï ‚Üí Set ‚Ñù, (‚àÄ n, IsOpen (s n)) ‚àß M = ‚ãÇ n, s n)
  (hF : ‚àÉ t : ‚Ñï ‚Üí Set ‚Ñù, (‚àÄ n, IsClosed (t n)) ‚àß M = ‚ãÉ n, t n) :
  ‚àÉ (K U : ‚Ñï ‚Üí Set ‚Ñù),
    (‚àÄ n, IsClosed (K n) ‚àß K n ‚äÜ M) ‚àß
    (‚àÄ n, IsOpen (U n) ‚àß M ‚äÜ U n) ‚àß
    (Antitone U) ‚àß (Monotone K) ‚àß
    (‚ãÇ n, (U n \ K n) = (‚àÖ : Set ‚Ñù)) ‚àß
    Tendsto (fun n => volume ((U n ‚à© Icc01) \ K n)) atTop (ùìù 0) := by
  classical
  rcases satz5_construct_sequences M hM_subset h_kappa0 h_uncount h_super hG hF with
    ‚ü®K, U, hK, hU, hU_antitone, hK_mono, hGap‚ü©
  have hU_open : ‚àÄ n, IsOpen (U n) := fun n => (hU n).1
  have hK_closed : ‚àÄ n, IsClosed (K n) := fun n => (hK n).1
  have hT : Tendsto (fun n => volume ((U n ‚à© Icc01) \ K n)) atTop (ùìù 0) :=
    tendsto_gap_length_to_zero U K hU_open hK_closed hU_antitone hK_mono hGap
  exact ‚ü®K, U, hK, hU, hU_antitone, hK_mono, hGap, hT‚ü©

end
end Satz5
