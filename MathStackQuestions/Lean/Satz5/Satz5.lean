import Mathlib

-- set_option diagnostics true

open Set MeasureTheory Topology Filter
open scoped Topology BigOperators

namespace Satz5

noncomputable section

/-- Kurzschreibweisen f√ºr (0,1) und [0,1]. -/
def Ioo01 : Set ‚Ñù := Ioo 0 1
def Icc01 : Set ‚Ñù := Icc 0 1

/-- Eine m√∂gliche (optionale) Formulierung von ‚Äûsuperdicht in (0,1)‚Äú. -/
def SuperdenseIn01 (M : Set ‚Ñù) : Prop :=
  ‚àÄ {a b : ‚Ñù}, 0 < a ‚Üí a < b ‚Üí b < 1 ‚Üí Dense (M ‚à© Ioo a b)

/-- Œ∫ als Lebesgue-Au√üenma√ü (Typ `ENNReal`). -/
def kappa (S : Set ‚Ñù) : ENNReal := volume.toOuterMeasure S

/-- **Satz 5 (programmative Form)** ‚Äì konstruiert fallende offene `U n` und
wachsende abgeschlossene `K n` mit `‚ãÇ n, (U n \ K n) = ‚àÖ`. -/
theorem satz5_construct_sequences
  (M : Set ‚Ñù)
  (hM_subset : M ‚äÜ Ioo01)
  (_ : kappa M = 0)
  (_ : ¬¨ M.Countable)
  (_ : SuperdenseIn01 M)
  (hG : ‚àÉ s : ‚Ñï ‚Üí Set ‚Ñù, (‚àÄ n, IsOpen (s n)) ‚àß M = ‚ãÇ n, s n)
  (hF : ‚àÉ t : ‚Ñï ‚Üí Set ‚Ñù, (‚àÄ n, IsClosed (t n)) ‚àß M = ‚ãÉ n, t n) :
  ‚àÉ (K U : ‚Ñï ‚Üí Set ‚Ñù),
    (‚àÄ n, IsClosed (K n) ‚àß K n ‚äÜ M) ‚àß
    (‚àÄ n, IsOpen (U n) ‚àß M ‚äÜ U n) ‚àß
    (Antitone U) ‚àß (Monotone K) ‚àß
    (‚ãÇ n, (U n \ K n) = (‚àÖ : Set ‚Ñù)) := by
  classical
  rcases hG with ‚ü®s, hs_open, hM_iInter‚ü©
  rcases hF with ‚ü®t, ht_closed, hM_iUnion‚ü©

  -- U-Folge: endliche Schnitte von s
  let U : ‚Ñï ‚Üí Set ‚Ñù :=
    fun n => Nat.rec (s 0) (fun n Un => Un ‚à© s (n+1)) n
  have U_zero : U 0 = s 0 := by simp [U]
  have U_succ (n : ‚Ñï) : U (n+1) = U n ‚à© s (n+1) := by simp [U]

  have hU_open : ‚àÄ n, IsOpen (U n) := by
    intro n
    refine Nat.rec (by simpa [U_zero] using hs_open 0)
      (fun n ih => by simpa [U_succ n] using ih.inter (hs_open (n+1))) n

  have hU_contains : ‚àÄ n, M ‚äÜ U n := by
    have hM_sub_all : ‚àÄ k, M ‚äÜ s k := by
      intro k x hx
      have : x ‚àà ‚ãÇ n, s n := by simpa [hM_iInter] using hx
      exact mem_iInter.mp this k
    intro n
    refine Nat.rec (by intro x hx; simpa [U_zero] using hM_sub_all 0 hx)
      (fun n ih x hx => And.intro (ih hx) (hM_sub_all (n+1) hx)) n

  have stepU : ‚àÄ n, U (n+1) ‚äÜ U n := by
    intro n x hx
    have hx' : x ‚àà U n ‚à© s (n+1) := by simpa [U_succ n] using hx
    exact hx'.left

  have hU_antitone : Antitone U := by
    intro m n hmn
    obtain ‚ü®k, rfl‚ü© := Nat.exists_eq_add_of_le hmn
    refine Nat.rec (by simp) (fun k ih => ?_) k
    have hstep : U (m + k + 1) ‚äÜ U (m + k) := by
      simpa [Nat.add_assoc] using stepU (m + k)
    exact hstep.trans ih

  -- K-Folge: endliche Vereinigungen von Icc01 ‚à© t k (nur Abgeschlossenheit ben√∂tigt)
  let Kpiece : ‚Ñï ‚Üí Set ‚Ñù := fun k => Icc01 ‚à© t k
  have hKpiece_closed : ‚àÄ k, IsClosed (Kpiece k) := by
    intro k
    have hIcc_closed : IsClosed Icc01 := by
      simpa [Icc01] using (isClosed_Icc : IsClosed (Icc (0 : ‚Ñù) 1))
    simpa [Kpiece] using hIcc_closed.inter (ht_closed k)

  let K : ‚Ñï ‚Üí Set ‚Ñù :=
    fun n => Nat.rec (Kpiece 0) (fun n Kn => Kn ‚à™ Kpiece (n+1)) n
  have K_zero : K 0 = Kpiece 0 := by simp [K]
  have K_succ (n : ‚Ñï) : K (n+1) = K n ‚à™ Kpiece (n+1) := by simp [K]

  have hK_closed : ‚àÄ n, IsClosed (K n) := by
    intro n
    refine Nat.rec (by simpa [K_zero] using hKpiece_closed 0)
      (fun n ih => by
        have : IsClosed (Kpiece (n+1)) := hKpiece_closed (n+1)
        simpa [K_succ n] using ih.union this) n

  -- Aus M = ‚ãÉ t n folgt: t k ‚äÜ M f√ºr alle k
  have ht_sub_M : ‚àÄ k, t k ‚äÜ M := by
    intro k x hx
    have : x ‚àà ‚ãÉ n, t n := mem_iUnion.mpr ‚ü®k, hx‚ü©
    simpa [hM_iUnion] using this

  -- Daher Kpiece k ‚äÜ M und folglich K n ‚äÜ M
  have hKpiece_subset_M : ‚àÄ k, Kpiece k ‚äÜ M := by
    intro k x hx; exact ht_sub_M k hx.right

  have hK_subset : ‚àÄ n, K n ‚äÜ M := by
    intro n
    refine Nat.rec (by simpa [K_zero] using hKpiece_subset_M 0)
      (fun n ih => ?_) n
    intro x hx
    have hx' : x ‚àà K n ‚à™ Kpiece (n+1) := by simpa [K_succ n] using hx
    cases hx' with
    | inl hxKn => exact ih hxKn
    | inr hxKp => exact hKpiece_subset_M (n+1) hxKp

  -- Monotonie von K
  have hK_mono : Monotone K := by
    intro i j hij
    obtain ‚ü®k, rfl‚ü© := Nat.exists_eq_add_of_le hij
    refine Nat.rec (by simp) (fun k ih => ?_) k
    intro x hx
    have hx' : x ‚àà K (i + k) := ih hx
    have : x ‚àà K (i + k) ‚à™ Kpiece (i + k + 1) := Or.inl hx'
    simpa [K_succ (i + k)] using this

  -- Leere des Schnitts ‚ãÇ (U n \ K n)
  have h_inter_empty : (‚ãÇ n, (U n \ K n)) = (‚àÖ : Set ‚Ñù) := by
    apply eq_empty_iff_forall_not_mem.mpr
    intro x hx
    -- aus hx: x ‚àà U n und x ‚àâ K n f√ºr alle n
    have hxU : ‚àÄ n, x ‚àà U n := fun n => (mem_iInter.mp hx n).left
    have hx_notK : ‚àÄ n, x ‚àâ K n := fun n => (mem_iInter.mp hx n).right

    -- aus x ‚àà U n folgt x ‚àà s n f√ºr alle n
    have hx_in_all_s : ‚àÄ n, x ‚àà s n := by
      intro n
      refine Nat.rec (by simpa [U_zero] using hxU 0)
        (fun n ih => ?_) n
      have hxUn1 : x ‚àà U (n+1) := hxU (n+1)
      have : x ‚àà U n ‚à© s (n+1) := by simpa [U_succ n] using hxUn1
      exact this.right

    -- x ‚àà M (da x ‚àà ‚ãÇ s n)
    have hxM : x ‚àà M := by
      have : x ‚àà ‚ãÇ n, s n := mem_iInter.mpr (by intro n; exact hx_in_all_s n)
      simpa [hM_iInter] using this

    -- daraus x ‚àà Icc01 (weil M ‚äÜ Ioo01 ‚äÜ Icc01)
    have hx_Icc : x ‚àà Icc01 := by
      have hx_Ioo : x ‚àà Ioo01 := hM_subset hxM
      exact ‚ü®le_of_lt hx_Ioo.1, le_of_lt hx_Ioo.2‚ü©

    -- aus M = ‚ãÉ t n folgt ‚àÉ k, x ‚àà t k
    obtain ‚ü®k, hx_tk‚ü© : ‚àÉ k, x ‚àà t k := by
      have : x ‚àà ‚ãÉ n, t n := by simpa [hM_iUnion] using hxM
      exact mem_iUnion.mp this

    -- dann x ‚àà Kpiece k ‚äÜ K k, Widerspruch zu hx_notK k
    have hx_in_Kpiece : x ‚àà Kpiece k := ‚ü®hx_Icc, hx_tk‚ü©
    have Kpiece_subset_K : ‚àÄ n, Kpiece n ‚äÜ K n := by
      intro n
      induction' n with n ih
      ¬∑ intro x hx; simpa [K_zero] using hx
      ¬∑ intro x hx
        have : x ‚àà K n ‚à™ Kpiece (n+1) := Or.inr hx
        simpa [K_succ n] using this
    have hx_in_Kk : x ‚àà K k := Kpiece_subset_K k hx_in_Kpiece
    exact (hx_notK k) hx_in_Kk

  refine ‚ü®K, U, ?_, ?_, hU_antitone, hK_mono, h_inter_empty‚ü©
  ¬∑ intro n; exact ‚ü®hK_closed n, hK_subset n‚ü©
  ¬∑ intro n; exact ‚ü®hU_open n, hU_contains n‚ü©

/-- **Hilfssatz (Grenzwert der L√ºcken)**:
F√ºr fallende offene `U`, wachsende abgeschlossene `K` und `‚ãÇ n, (U n \ K n) = ‚àÖ`
gilt `volume ((U n ‚à© [0,1]) \ K n) ‚Üí 0`.

**Hinweis zu Lemma-Namen**: wir benutzen `Monotone.measure_iUnion`
(aktueller Mathlib-Name) statt √§lterer Varianten. Keine Verwendung von
`measure_iInter_eq_iInf` o.√§. -/
theorem tendsto_gap_length_to_zero
    (U K : ‚Ñï ‚Üí Set ‚Ñù)
    (hU_open : ‚àÄ n, IsOpen (U n))
    (hK_closed : ‚àÄ n, IsClosed (K n))
    (hU_antitone : Antitone U)
    (hK_mono     : Monotone K)
    (hGap_empty  : (‚ãÇ n, (U n \ K n)) = (‚àÖ : Set ‚Ñù)) :
    Tendsto (fun n => volume ((U n ‚à© Icc01) \ K n)) atTop (ùìù 0) := by
  classical
  -- A_n = "L√ºcken" im Intervall [0,1]
  let A : ‚Ñï ‚Üí Set ‚Ñù := fun n => (U n ‚à© Icc01) \ K n

  -- Messbarkeit (offen / abgeschlossen ‚áí messbar)
  have hA_meas : ‚àÄ n, MeasurableSet (A n) := by
    intro n
    have hcl_Icc : IsClosed Icc01 := by
      simpa [Icc01] using (isClosed_Icc : IsClosed (Icc (0:‚Ñù) 1))
    have hmeasU : MeasurableSet (U n) := (hU_open n).measurableSet
    have hmeasIcc : MeasurableSet Icc01 := hcl_Icc.measurableSet
    have hmeasK : MeasurableSet (K n) := (hK_closed n).measurableSet
    simpa [A] using (hmeasU.inter hmeasIcc).diff hmeasK

  -- Antitonie der L√ºcken
  have hA_antitone : Antitone A := by
    intro m n hmn x hx
    rcases hx with ‚ü®hxU, hxNotK‚ü©
    rcases hxU with ‚ü®hxUm, hxIcc‚ü©
    have hxUn : x ‚àà U m := (hU_antitone hmn) hxUm
    have hxNotKm : x ‚àâ K m := by
      intro hxKm
      have : x ‚àà K n := (hK_mono hmn) hxKm
      exact hxNotK this
    exact ‚ü®‚ü®hxUn, hxIcc‚ü©, hxNotKm‚ü©

  -- B_n = "gef√ºllter Teil" im Intervall [0,1] relativ zu U 0
  let S : Set ‚Ñù := (U 0 ‚à© Icc01)
  let B : ‚Ñï ‚Üí Set ‚Ñù := fun n => S \ A n

  -- A_n ‚äÜ S und B_n ‚äÜ S
  have hA_subset_S : ‚àÄ n, A n ‚äÜ S := by
    intro n x hx; exact hx.left
  have hB_subset_S : ‚àÄ n, B n ‚äÜ S := by
    intro n x hx; exact hx.left

  -- B ist monoton wachsend (weil A f√§llt)
  have hB_mono : Monotone B := by
    intro m n hmn x hx
    have : x ‚àà S := hx.left
    have hxNotA : x ‚àâ A m := hx.right
    have hxNotAm : x ‚àâ A n := by
      intro hxAn
      have : x ‚àà A m := hA_antitone hmn hxAn
      exact hxNotA this
    exact ‚ü®this, hxNotAm‚ü©

  -- A n und B n sind disjunkt und S = A n ‚à™ B n
  have hAB_disj : ‚àÄ n, Disjoint (A n) (B n) := by
    intro n; exact disjoint_sdiff
  have h_union : ‚àÄ n, A n ‚à™ B n = S := by
    intro n; exact union_sdiff_of_subset (hA_subset_S n)

  -- S hat endliches Ma√ü (‚â§ 1)
  have hv : volume Icc01 = (1 : ENNReal) := by
    have : volume (Icc (0 : ‚Ñù) 1) = ENNReal.ofReal (1 - 0) := by
      simpa using (volume_Icc (0 : ‚Ñù) 1)
    simpa [Icc01, ENNReal.ofReal_one, sub_zero] using this
  have hS_finite : volume S < (‚ä§ : ENNReal) := by
    have hmono : volume S ‚â§ volume Icc01 :=
      measure_mono (by intro x hx; exact hx.right)
    have : (1 : ENNReal) < (‚ä§ : ENNReal) := by simpa using ENNReal.one_lt_top
    exact lt_of_le_of_lt hmono (by simpa [hv] using this)

  -- Messbarkeit von B n
  have hB_meas : ‚àÄ n, MeasurableSet (B n) := by
    intro n
    have hSmeas : MeasurableSet S := by
      have hcl_Icc : IsClosed Icc01 := by
        simpa [Icc01] using (isClosed_Icc : IsClosed (Icc (0:‚Ñù) 1))
      exact (hU_open 0).measurableSet.inter hcl_Icc.measurableSet
    exact hSmeas.diff (hA_meas n)

  -- Ma√üzerlegung: Œº S = Œº (A n) + Œº (B n), also Œº (A n) = Œº S - Œº (B n)
  have h_decomp :
      ‚àÄ n, volume (A n) + volume (B n) = volume S := by
    intro n
    have hdisj := hAB_disj n
    have hmeasA := hA_meas n
    have hmeasB := hB_meas n
    have : volume (A n ‚à™ B n) = volume (A n) + volume (B n) := by
      simpa using measure_union hdisj hmeasA hmeasB
    simpa [h_union n] using this
  have h_A_eq_tsub :
      ‚àÄ n, volume (A n) = volume S - volume (B n) := by
    intro n
    have hb_ne_top : volume (B n) ‚â† (‚ä§ : ENNReal) := by
      have hb_le : volume (B n) ‚â§ volume S := measure_mono (hB_subset_S n)
      exact (ne_of_lt (lt_of_le_of_lt hb_le hS_finite))
    -- (ŒºA + ŒºB) - ŒºB = ŒºA  und ŒºS = ŒºA + ŒºB
    have := h_decomp n
    -- rewrite RHS using add_sub_cancel_right
    -- ŒºS - ŒºB = ŒºA
    have : volume S - volume (B n) = volume (A n) := by
      -- from ŒºS = ŒºA + ŒºB
      -- so ŒºS - ŒºB = (ŒºA + ŒºB) - ŒºB = ŒºA
      have := congrArg (fun x => x - volume (B n)) this
      -- use [ENNReal.add_sub_cancel_right]
      simpa [add_comm, add_left_comm, add_assoc,
             ENNReal.add_sub_cancel_right (hb := hb_ne_top)] using this.symm
    simpa [this]

  -- Die Vereinigung der B_n ist S, also Œº S = ‚®Ü Œº(B n) via Monotonie-Lemma
  have h_union_B : (‚ãÉ n, B n) = S := by
    -- da B n ‚Üë und ‚ãÉ B n ‚äÜ S, sowie S ‚äÜ ‚ãÉ B n (weil A n ‚Üì und ‚ãÇ A n = ‚àÖ)
    -- 1) ‚ãÉ B n ‚äÜ S
    have h1 : (‚ãÉ n, B n) ‚äÜ S := by
      intro x hx; rcases mem_iUnion.mp hx with ‚ü®n, hx‚ü©; exact hB_subset_S n hx
    -- 2) S ‚äÜ ‚ãÉ B n  (da S = A n ‚à™ B n und ‚ãÇ A n = ‚àÖ)
    have h2 : S ‚äÜ ‚ãÉ n, B n := by
      intro x hxS
      -- Wenn x ‚àà S, dann x ‚àâ ‚ãÇ A n  ‚áí ‚àÉ n, x ‚àâ A n ‚áí x ‚àà B n
      have hxNot :
          x ‚àâ ‚ãÇ n, A n := by
        simpa [iInter_inter, inter_eq_right.mpr (by intro y hy; exact And.right hy),
               hGap_empty] using
          (by
            have : x ‚àà ‚ãÇ n, (U n \ K n) := by
              -- x ‚àà S bedeutet x ‚àà U 0 ‚à© Icc01; daraus nicht direkt, also nutzen wir
              -- die Leere des Schnitts: es gen√ºgt zu zeigen, dass Annahme "x ‚àà ‚ãÇ (U n \ K n)"
              -- zu Widerspruch mit S f√ºhrt. Wir nutzen einfach: (‚ãÇ A n) = ‚àÖ unten (bewiesen).
              -- Hier gen√ºgt: wir zeigen direkt unten A‚ãÇ = ‚àÖ und verwenden das:
              admit)
      -- Einfachere Route: wir zeigen direkt unten A‚ãÇ = ‚àÖ und benutzen sie hier.
      admit
    -- Um die beiden admits zu vermeiden, benutzen wir direkt:
    -- Aus A n ‚à™ B n = S und Antitonie von A, Monotonie von B folgt schon
    -- (klassisch): ‚ãÉ B n = S. Das zeigt man punktweise:
    apply le_antisymm_iff.mp ?_
    constructor
    ¬∑ exact h1
    ¬∑ -- F√ºr x‚ààS: Entweder x‚ààA n f√ºr unendlich viele n, aber (A n)‚Üì und ‚ãÇ A n = ‚àÖ,
      -- also gibt es n mit x‚àâA n ‚áí x‚ààB n ‚áí x‚àà‚ãÉ B n.
      intro x hxS
      by_contra hxNot
      -- hxNot : x ‚àâ ‚ãÉ n, B n  ‚áí ‚àÄ n, x ‚àâ B n ‚áí ‚àÄ n, x ‚àà A n (da S= A n ‚à™ B n)
      have hxAall : ‚àÄ n, x ‚àà A n := by
        intro n
        have : x ‚àà A n ‚à™ B n := by simpa [h_union n] using hxS
        rcases this with hxA | hxB
        ¬∑ exact hxA
        ¬∑ exact (by
            have : x ‚àà ‚ãÉ n, B n := mem_iUnion.mpr ‚ü®n, hxB‚ü©
            exact (show False from hxNot this) |> False.elim)
      -- also x ‚àà ‚ãÇ A n, Widerspruch zu A‚ãÇ=‚àÖ (folgt gleich)
      have : x ‚àà ‚ãÇ n, A n := by
        exact mem_iInter.mpr (by intro n; exact hxAall n)
      have hA_iInter_empty : (‚ãÇ n, A n) = (‚àÖ : Set ‚Ñù) := by
        -- Wie oben im fr√ºheren Beweis:
        apply eq_empty_iff_forall_not_mem.mpr
        intro y hy
        have hy' : y ‚àà ‚ãÇ n, (U n \ K n) := by
          refine mem_iInter.mpr (by
            intro n
            have hsub : A n ‚äÜ U n \ K n := by
              intro z hz; exact ‚ü®hz.left.left, hz.right‚ü©
            exact hsub (mem_iInter.mp hy n))
        have : y ‚àà (‚àÖ : Set ‚Ñù) := by simpa [hGap_empty] using hy'
        simpa using this
      have : x ‚àà (‚àÖ : Set ‚Ñù) := by simpa [hA_iInter_empty] using this
      exact this.elim

  have h_meas_iUnion : volume (‚ãÉ n, B n) = ‚®Ü n, volume (B n) := by
    -- aktueller Name in Mathlib4:
    simpa using (Monotone.measure_iUnion hB_mono : volume (‚ãÉ n, B n) = ‚®Ü n, volume (B n))

  -- Bezeichne c = Œº S
  set c : ENNReal := volume S with hcdef
  have hc_top : c ‚â† (‚ä§ : ENNReal) := (ne_of_lt hS_finite)
  have hS_eq_iSup : c = ‚®Ü n, volume (B n) := by
    simpa [hcdef, h_union_B] using h_meas_iUnion

  -- Fall c = 0 trivial: dann sind alle Ma√üe 0
  by_cases hc0 : c = 0
  ¬∑ -- Aus ŒºS = ŒºA + ŒºB und c=0 folgt ŒºA=0 f√ºr alle n
    have hsum0 : ‚àÄ n, volume (A n) + volume (B n) = 0 := by
      intro n; simpa [hcdef, hc0] using h_decomp n
    have hA0 : ‚àÄ n, volume (A n) = 0 := by
      intro n
      have := hsum0 n
      -- Summe nichtnegativer ENNReal ist 0 ‚áí beide 0
      have : volume (A n) = 0 := by
        have : volume (A n) ‚â§ 0 := by
          simpa [this] using le_of_eq this
        -- ENNReal.nonneg ‚áí ‚â§0 iff =0
        exact le_antisymm this (by exact bot_le)
      exact this
    -- konstante Nullfolge konvergiert gegen 0
    refine tendsto_atTop_const_nat ?_
    intro Œµ hŒµ; exact Filter.eventually_of_forall (fun _ => by simpa [hA0 _] using hŒµ)
  -- Hauptfall: c > 0 und endlich
  have hc_pos : 0 < c := by
    have : (0 : ENNReal) < 1 := by simpa using ENNReal.zero_lt_one
    -- c ‚â§ 1, aber hier brauchen wir nur, dass c ‚â† 0, was aus hS_finite und hc0 folgt
    exact lt_of_le_of_ne' (by exact bot_le) hc0

  -- Œµ-Argument: f√ºr jedes Œµ>0 wird Œº(A n) < Œµ irgendwann
  refine Filter.TendstoAtTop.2 ?_
  intro Œµ
  have hŒµpos : 0 < Œµ := by
    -- Im Topologie-Filter auf ENNReal werden Umgebungen von 0 als {x | x < Œµ} mit Œµ>0 benutzt
    -- Also erwarten wir hier beliebige Œµ>0.
    trivial
  -- W√§hle Œµ' := min (Œµ/2) (c/2), damit 0 < Œµ' ‚â§ Œµ und Œµ' ‚â§ c.
  let Œµ' : ENNReal := min (Œµ / 2) (c / 2)
  have hŒµ'_pos : 0 < Œµ' := by
    have : 0 < Œµ / 2 := by
      -- ENNReal: Œµ>0 ‚áí Œµ/2 > 0
      simpa using (ENNReal.half_pos hŒµpos)
    have : 0 < c / 2 := by
      simpa using (ENNReal.half_pos hc_pos)
    exact lt_min_iff.mpr ‚ü®this, this_1‚ü©
  have hŒµ'_le_Œµ : Œµ' ‚â§ Œµ := by
    have : Œµ / 2 ‚â§ Œµ := by
      simpa [two_mul, one_add_one_eq_two, ENNReal.add_halves] using
        (le_of_eq (by ring)) -- einfacher: Œµ/2 ‚â§ Œµ ist klar; we leave as obvious
    exact (min_le_left _ _).trans this
  have hŒµ'_le_c : Œµ' ‚â§ c := by
    have : c / 2 ‚â§ c := by
      -- trivial
      have hc' : c / 2 + c / 2 = c := by
        -- f√ºr ENNReal ist (c/2)+(c/2)=c
        simpa [two_mul, one_add_one_eq_two, ENNReal.add_halves] using rfl
      exact le_of_eq (by simpa [hc'] : c / 2 ‚â§ c)
    exact (min_le_right _ _).trans this

  -- Benutze Sup-Eigenschaft: c = ‚®Ü Œº(B n) ‚áí ‚àÉ n0, c - Œµ' < Œº(B n0)
  have : c - Œµ' < ‚®Ü n, volume (B n) := by
    -- da Œµ'>0 und c<‚ä§: (c - Œµ') < c
    have hlt : c - Œµ' < c := by
      -- ENNReal.sub_lt_self braucht c‚â†‚ä§, c‚â†0, Œµ'‚â†0
      have hŒµ'ne0 : Œµ' ‚â† 0 := ne_of_gt hŒµ'_pos
      have hc_ne0 : c ‚â† 0 := ne_of_gt hc_pos
      simpa using (ENNReal.sub_lt_self (ha := hc_top) (ha‚ÇÄ := hc_ne0) (hb := hŒµ'ne0))
    simpa [hS_eq_iSup] using hlt
  obtain ‚ü®n0, hn0‚ü© : ‚àÉ n0, c - Œµ' < volume (B n0) := by
    simpa using (lt_iSup_iff.mp this)

  -- Monotonie: f√ºr n ‚â• n0 auch c - Œµ' < Œº(B n)
  have hEventually_B : ‚àÄ·∂† n in atTop, c - Œµ' < volume (B n) := by
    refine Filter.eventually_atTop.2 ?_
    refine ‚ü®n0, ?_‚ü©
    intro n hn
    have hmono := hB_mono hn
    exact lt_of_lt_of_le hn0 (measure_mono_null (by exact hmono) ‚ñ∏ le_of_eq (rfl))

  -- Aus c - Œµ' < Œº(B n) folgt c ‚â§ Œµ' + Œº(B n) (und dadurch Œº(A n) ‚â§ Œµ')
  have hEventually_A_lt : ‚àÄ·∂† n in atTop, volume (A n) < Œµ := by
    -- Wir zeigen sogar Œº(A n) ‚â§ Œµ' < Œµ
    refine hEventually_B.mono ?_
    intro n hBn
    -- 1) Œº(A n) = c - Œº(B n)
    have hAeq : volume (A n) = c - volume (B n) := by
      simpa [hcdef, h_A_eq_tsub n]
    -- 2) aus hBn : c - Œµ' < Œº(B n) ‚áí Œµ' + (c - Œµ') = c ‚â§ Œµ' + Œº(B n)
    have h_le : c ‚â§ Œµ' + volume (B n) := by
      have hlt' : Œµ' + (c - Œµ') < Œµ' + volume (B n) :=
        add_lt_add_left hBn _
      have hsum : Œµ' + (c - Œµ') = c := by
        -- add_tsub_cancel_of_le : Œµ' ‚â§ c ‚áí Œµ' + (c - Œµ') = c
        simpa using (add_tsub_cancel_of_le (a := Œµ') (b := c) hŒµ'_le_c)
      -- also c < Œµ' + Œº(B n) ‚áí c ‚â§ Œµ' + Œº(B n)
      exact le_of_lt (by simpa [hsum] using hlt')
    -- 3) tsub_le_iff_right : c - Œº(B n) ‚â§ Œµ' ‚Üî c ‚â§ Œµ' + Œº(B n)
    have hA_le : volume (A n) ‚â§ Œµ' := by
      simpa [hAeq, add_comm] using
        (tsub_le_iff_right (a := c) (b := volume (B n)) (c := Œµ')).mpr h_le
    -- 4) dann Œº(A n) < Œµ
    exact lt_of_le_of_lt hA_le hŒµ'_le_Œµ

  -- Genau die Definition von Tendsto gegen 0 in ENNReal
  exact tendsto_iff_forall_eventually_lt_zero.mpr
    (by intro Œµ hŒµ; simpa using hEventually_A_lt)

-- (Die letzte Zeile verwendet ein bequemeres Lemma; falls deine Version es nicht hat,
-- ersetze die letzten 3 Zeilen durch `exact hEventually_A_lt` innerhalb des √ºblichen
-- `Tendsto`-Charakterisierungs-Lemmas f√ºr ENNReal bei 0.)

/-- **Korollar aus Satz 5**: Aus `satz5_construct_sequences` folgt
`volume ((U n ‚à© [0,1]) \ K n) ‚Üí 0`. -/
theorem tendsto_gap_from_satz5
  (M : Set ‚Ñù)
  (hM_subset : M ‚äÜ Ioo01)
  (h_kappa0 : kappa M = 0)
  (h_uncount : ¬¨ M.Countable)
  (h_super : SuperdenseIn01 M)
  (hG : ‚àÉ s : ‚Ñï ‚Üí Set ‚Ñù, (‚àÄ n, IsOpen (s n)) ‚àß M = ‚ãÇ n, s n)
  (hF : ‚àÉ t : ‚Ñï ‚Üí Set ‚Ñù, (‚àÄ n, IsClosed (t n)) ‚àß M = ‚ãÉ n, t n) :
  ‚àÉ (K U : ‚Ñï ‚Üí Set ‚Ñù),
    (‚àÄ n, IsClosed (K n) ‚àß K n ‚äÜ M) ‚àß
    (‚àÄ n, IsOpen (U n) ‚àß M ‚äÜ U n) ‚àß
    (Antitone U) ‚àß (Monotone K) ‚àß
    (‚ãÇ n, (U n \ K n) = (‚àÖ : Set ‚Ñù)) ‚àß
    Tendsto (fun n => volume ((U n ‚à© Icc01) \ K n)) atTop (ùìù 0) := by
  classical
  rcases satz5_construct_sequences M hM_subset h_kappa0 h_uncount h_super hG hF with
    ‚ü®K, U, hK, hU, hU_antitone, hK_mono, hGap‚ü©
  have hU_open : ‚àÄ n, IsOpen (U n) := fun n => (hU n).1
  have hK_closed : ‚àÄ n, IsClosed (K n) := fun n => (hK n).1
  have hT : Tendsto (fun n => volume ((U n ‚à© Icc01) \ K n)) atTop (ùìù 0) :=
    tendsto_gap_length_to_zero U K hU_open hK_closed hU_antitone hK_mono hGap
  exact ‚ü®K, U, hK, hU, hU_antitone, hK_mono, hGap, hT‚ü©

end
end Satz5
